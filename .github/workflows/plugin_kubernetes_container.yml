name: plugin_kubernetes_container
on:
  pull_request:
    paths:
      - ".github/workflows/plugin_kubernetes_container.yml"
      - "plugins/kubernetes_container.yaml"
  push:
    branches:
      - master
jobs:
  default_format:
    runs-on: ubuntu-latest
    steps:
    - name: Clone stanza-plugins
      uses: actions/checkout@v2

    - name: Clone Log Library
      uses: actions/checkout@v2
      with:
        repository: 'observIQ/log-library'
        path: log-library
        token: ${{ secrets.LOG_LIBRARY_ACCESS_TOKEN }}
        ref: otel

    - name: Install Minikube
      run: |
        sudo apt-get install -y conntrack >/dev/null
        curl -s -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
        sudo install minikube-linux-amd64 /usr/local/bin/minikube

    # Start Minikube with --driver=none to run a k8s cluster within the actions
    # environment. This allows us to share configs, logs, and output with the container
    - name: Start Minikube
      run: |
        minikube start \
          --driver=none \
          --kubernetes-version=v1.20.0 \
          --container-runtime=docker

    - name: Generate Dockerfile
      run: |
        cat <<- EOF > Dockerfile
        FROM ubuntu:20.04
        WORKDIR /
        RUN apt-get update >/dev/null
        RUN apt-get install -y curl >/dev/null
        RUN mkdir /collector /storage /output
        RUN curl -s -o collector/collector https://storage.googleapis.com/observiq-cloud/observiq-collector/0.0.10/collector_linux_amd64
        RUN chmod +x collector/collector
        COPY log-library/cases/kubernetes_container/default/config/collector.yaml /input/config/collector.yaml
        COPY log-library/cases/kubernetes_container/default/logs /input/logs
        COPY plugins /plugins
        EOF

    - name: Build Image
      run: docker build . -t agent:latest

    # local docker images can be used when minikube driver=none and imagePullPolicy: IfNotPresent
    - name: Generate Deployment Manifest
      run: |
        cat <<- EOF > deploy.yaml
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: agent
          labels:
            app: agent
        spec:
          replicas: 1
          selector:
            matchLabels:
              app: agent
          template:
            metadata:
              labels:
                app: agent
            spec:
              containers:
              - name: agent
                image: agent:latest
                imagePullPolicy: IfNotPresent
                command: ["sh"]
                args: ["-c", "/collector/collector", "--config", "/input/config/collector.yaml"]
        EOF

    - name: Create Output Directory
      run: mkdir output

    - name: Run Agent
      timeout-minutes: 3
      run: |
        kubectl apply -f deploy.yaml
        sleep 10 && kubectl get pods
        pod=$(kubectl get pods | grep agent | awk '{print $1}')
        kubectl describe pod "${pod}"
        kubectl logs "${pod}"
    
    - name: Wait For Agent
      timeout-minutes: 3
      run: |
        kubectl rollout status -w deployment/agent   
        sleep 2 && docker logs agent

    - name: Pause
      run: sleep 10

    # Generally we want to stop the agent before stopping it however kubernetes will
    # purge the log if we kill the pod
    - name: Dump Stanza Logs
      run: kubectl logs deploy/agent

    - name: Get Output
      run: |
        pod=$(kubectl get pods | grep agent | awk '{print $1}')
        kubectl cp "${pod}:/output/out" output/out
        cat output/out

    - name: Get Expected Output
      run: |
        cp log-library/cases/kubernetes_container/default/expect/expect.json output/expect
        cat output/expect

    - name: Install Json Parser 'jtool'
      run: |
        wget https://github.com/jsirianni/jtool/releases/download/v0.0.6/jtool-linux-amd64
        chmod +x jtool-linux-amd64

    - name: Check output
      run: |
        if ./jtool-linux-amd64 --actual-file output/out --expect-file output/expect; then
          echo "pass"
        else
          echo "fail"
          exit 1
        fi