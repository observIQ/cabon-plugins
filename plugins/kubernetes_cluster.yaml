version: 0.0.9
title: Kubernetes Cluster
description: Log parser for Kubernetes
supported_platforms:
  - kubernetes
parameters:
  - name: container_log_path
    label: Containers Log Path
    description: Kubernetes Containers Log Path
    type: string
    default: "/var/log/containers/"
  - name: kubelet_journald_log_path
    label: Kubelet Journald Log Path
    description: 'Kubernetes Kubelet Journald Log path. It will read from /run/journal or /var/log/journal if this parameter is omitted'
    type: string
  - name: cluster_name
    label: Cluster Name
    description: 'Cluster Name to be added to a resource label'
    type: string
  - name: start_at
    label: Start At
    description: "Start reading file from 'beginning' or 'end'"
    type: enum
    valid_values:
      - beginning
      - end
    default: end

# Set Defaults
# {{ $cluster_name := default "" .cluster_name }}
# {{ $container_log_path := default "/var/log/containers/*" .container_log_path }}
# {{ $start_at := default "end" .start_at }}

# Pipeline Template
pipeline:
  - id: container_reader
    type: file_input
    include:
      - '{{ $container_log_path }}kube*'
    start_at: '{{ $start_at }}'
    labels:
      plugin_id: '{{ .id }}'
    resource:
      k8s.node.name: "EXPR(env('NODE_NAME'))"
      k8s.cluster.name: '{{ .cluster_name }}'

  - id: file_name_parser
    type: regex_parser
    parse_from: $labels.file_name
    regex: '^(?P<pod_name>[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*)_(?P<namespace>[^_]+)_(?P<container_name>.+)-(?P<container_id>[a-z0-9]{64})\.log$'

  - id: resource_restructurer
    type: restructure
    ops:
      - move:
          from: '$record.pod_name'
          to: '$resource["k8s.pod.name"]'
      - move:
          from: '$record.namespace'
          to: '$resource["k8s.namespace.name"]'
      - move:
          from: '$record.container_name'
          to: '$resource["container.name"]'
      - move:
          from: '$record.container_id'
          to: '$resource["container.id"]'

  - id: container_type_router
    type: router
    routes:
      - expr: '$record matches "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3,9}Z std(?:out|err) [FP] .*"'
        output: containerd_parser
    default: docker_json_parser

  - id: containerd_parser
    type: regex_parser 
    regex: '^(?P<time>[^\s]+) (?P<stream>\w+) (?P<partial>\w) (?P<log>.*)'

  - id: containerd_recombine
    type: recombine
    combine_field: log
    is_last_entry: "$record.partial == 'F'"
    output: nested_json_parser

  - id: docker_json_parser
    type: json_parser

  - id: nested_json_parser
    type: json_parser
    if: '$record.log != nil and $record.log matches "^{.*}\\s*$"'

  - id: timestamp_parser
    type: time_parser
      parse_from: time
      layout: '%Y-%m-%dT%H:%M:%S.%sZ'

  - id: sev_parser
    type: severity_parser
    parse_from: stream
    preserve_to: '$labels.stream'
    mapping:
      error: stderr
      info: stdout

  - type: restructure
    ops:
      - move:
          from: log
          to: '$record'

  - id: add_kubernetes_metadata
    type: k8s_metadata_decorator
    output: {{ .output }}

  # Add label log_type
  - id: add_labels_router
    type: router
    routes:
      - output: {{ .output }}
        expr: '$labels["k8s_pod_label/component"] == "kube-controller-manager"'
        labels:
          log_type: 'k8s.controller'
      - output: {{ .output }}
        expr: '$labels["k8s_pod_label/component"]  == "kube-scheduler"'
        labels:
          log_type: 'k8s.scheduler'
      - output: {{ .output }}
        expr: '$labels["k8s_pod_label/component"] == "kube-apiserver"'
        labels:
          log_type: 'k8s.apiserver'
      - output: {{ .output }}
        expr: '$labels["k8s_pod_label/component"] startsWith "kube-proxy"'
        labels:
          log_type: 'k8s.proxy'
      - output: {{ .output }}
        expr: true
        labels:
          log_type: 'k8s.container'

  # Use journald to gather kubelet logs. Use provided path for journald if available otherwise use default locations.
  - id: kubelet_reader
    type: journald_input
    # {{ if .kubelet_journald_log_path }}
    directory: '{{ .kubelet_journald_log_path }}'
    # {{ end }}
    labels:
      log_type: 'k8s.kubelet'
      plugin_id: '{{ .id }}'
    output: kubelet_filter

  # Only grab entry if it is the kubelet.service
  - id: kubelet_filter
    type: filter
    expr: '$record._SYSTEMD_UNIT != "kubelet.service"'

  # Move hostname to k8s node resource
  - id: kubelet_resource
    type: restructure
    ops:
      - move:
          from: "$record._HOSTNAME"
          to: "$resource['host.name']"
      - move:
          from: "MESSAGE"
          to: "message"
      - add:
          field: "$resource['k8s.cluster.name']"
          value: '{{ $cluster_name }}'

  # If message field matches format then, parse it otherwise send down the pipeline.
  - id: kubelet_message_parser_router
    type: router
    routes:
      - output: message_regex_parser
        expr: '$record.message matches "^\\w\\d{4}"'
      - output: {{ .output }}
        expr: true

  # message field seems to match expected format.
  - id: message_regex_parser
    type: regex_parser
    parse_from: message
    regex: '(?P<severity>\w)(?P<timestamp>\d{4} \d{2}:\d{2}:\d{2}.\d+)\s+(?P<pid>\d+)\s+(?P<source>[^ \]]+)\] (?P<message>.*)'
    severity:
      parse_from: severity
      mapping:
        debug: d
        info: i
        warning: w
        error: e
        critical: c
    timestamp:
      parse_from: timestamp
      layout: '%m%d %H:%M:%S.%s'
    output: {{ .output }}
