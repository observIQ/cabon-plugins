version: 0.0.5
title: PostgreSQL
description: |2
  Log parser for PostgreSQL. This plugin expects the following settings in postgresql.conf:
  log_destination = 'stderr'
  logging_collector = on
  log_directory = 'pg_log'
  log_filename = 'postgresql-%Y-%m-%d_%H%M%S.log'
  log_truncate_on_rotation = off
  log_rotation_age = 1d
  log_min_duration_statement = 0
  log_connections = on
  log_duration = on
  log_hostname = on
  log_timezone = 'UTC'
  log_line_prefix = 't=%t p=%p s=%c l=%l u=%u db=%d r=%r '
parameters:
  - name: postgresql_log_path
    label: PostgreSQL Log Path
    description: Path to the PostgreSQL log file
    type: string
    default: "/var/lib/pgsql/*/data/pg_log/postgresql-*.log"
  - name: start_at
    label: Start At
    description: Start reading file from 'beginning' or 'end'
    type: enum
    valid_values:
     - beginning
     - end
    default: end

# Set Defaults
# {{$postgresql_log_path := default "/var/lib/pgsql/*/data/pg_log/postgresql-*.log" .postgresql_log_path}}
# {{$start_at := default "end" .start_at}}

# Pipeline Template
pipeline:
  - type: file_input
    include:
      - {{ $postgresql_log_path }}
    multiline:
      line_start_pattern: '^t=\d{4}-\d{2}-\d{2}\s+\d{2}:\d{2}:\d{2}'
    write_to: log_entry
    start_at: {{ $start_at }}
    labels:
      log_type: 'postgresql.general'
      plugin_id: {{ .id }}

  - id: general_regex_parser
    type: regex_parser
    parse_from: log_entry
    regex: '^t=(?P<time>\d{4}-\d{2}-\d{2}\s+\d{2}:\d{2}:\d{2}\s+[^\s]+)\s+p=(?P<process_id>\d*)\s+s=(?P<process_start_time>[^\.]*)\.[^\s]+\s+l=(?P<process_log_line>[^\s]*)\s+u=(?P<user_name>[^\s]*)\s+db=(?P<database>[^\s]*)\s+r=(?P<client_address>[^\s]*)\s*(LOG:\s*duration:\s*(?P<duration>[\w\.:]*)\s*ms\s*)?(?P<message>[\w\W]+)?'
    timestamp:
      parse_from: time
      layout: '%F %T %Z'

  - type: router
    default: client_address_regex_parser
    routes:
      - output: client_address_regex_parser
        expr: '$record.duration != ""'
        labels:
          log_type: 'postgresql.slow_query'

  - id: client_address_regex_parser
    if: '$record.client_address matches "[\\w\\.]*\\([\\d]*\\)"'
    type: regex_parser
    parse_from: $record.client_address
    regex: '(?P<client_address>[^\(]*)\((?P<client_address_port>[^\)]*)\)'
    output: statement_regex_parser

  - id: statement_regex_parser
    if: '$record.message matches "^STATEMENT:|^statement:"'
    type: regex_parser
    parse_from: $record.message
    regex: '(^STATEMENT:\s*|^statement:\s*)(?P<statement>.*)'
    output: {{ .output }}
