# Plugin Info
version: 0.0.2
title: Elasticsearch
description: Log parser for Elasticsearch
parameters:
  - name: enable_json_logs
    label: JSON Logs
    description: Enable to collect Elasticsearch JSON logs
    type: bool
    default: true
  - name: json_log_paths
    label: JSON Logs Path
    description: The absolute path to the Elasticsearch JSON logs
    type: strings
    default: 
      - "/var/log/elasticsearch/*_server.json"
      - "/var/log/elasticsearch/*_deprecation.json"
      - "/var/log/elasticsearch/*_index_search_slowlog.json"
      - "/var/log/elasticsearch/*_index_indexing_slowlog.json"
      - "/var/log/elasticsearch/*_audit.json"
    relevant_if:
      enable_json_logs:
        equals: true
  - name: enable_gc_logs
    label: Garbage Collection Logs
    description: Enable to collect Elasticsearch garbage collection logs
    type: bool
    default: false
  - name: gc_log_path
    label: Garbage Collection Logs Path
    description: The absolute path to the Elasticsearch garbage collection logs
    type: string
    default: "/var/log/elasticsearch/gc.log*"
    relevant_if:
      enable_gc_logs:
        equals: true
  - name: start_at
    label: Start At
    description: Start reading files from 'beginning' or 'end'
    type: enum
    valid_values:
      - beginning
      - end
    default: end

# Set Defaults
# {{$default_json_log_paths := makeSlice "/var/log/elasticsearch/*_server.json"}}
# {{$json_log_paths := default .default_json_log_paths .json_log_paths}}
# {{$enable_json_logs := default true .enable_json_logs}}
# {{$enable_gc_logs := default false .enable_gc_logs}}
# {{$gc_log_path := default "/var/log/elasticsearch/gc.log*" .gc_log_path}}
# {{$start_at := default "end" .start_at}}

# Pipeline Template
pipeline:
# {{ if $enable_json_logs }}
  - id: elasticsearch_input
    type: file_input
    start_at: '{{ $start_at }}'
    multiline:
      line_start_pattern: '^{.*'
    include:
      # {{ range $i, $fp := .json_log_paths  }}
      - '{{ $fp }}'
      # {{ end }}
    output: elasticsearch_parser

  - id: elasticsearch_parser
    type: json_parser
    severity:
      parse_from: level
      preset: none
      preserve_to: level
      mapping:
        debug:
          - DEBUG
          - TRACE
        info: INFO
        warning:
          - WARN
          - DEPRECATION
        error:
          - ERROR
          - CRITICAL
        critical: FATAL
    output: time_parser_router

  - id: time_parser_router
    type: router
    routes:
      - output: local_timestamp_parser
        expr: '$record.timestamp != nil and $record.timestamp matches "^%Y-%m-%dT%H:%M:%S,%L[\\+-]\\d{2}:\\d{2}"'
      - output: utc_timestamp_parser
        expr: '$record.timestamp != nil and $record.timestamp matches "^%Y-%m-%dT%H:%M:%S,%LZ"'

  - id: local_containerd_timestamp_parser
    type: time_parser
    parse_from: $record.time
    layout: '%Y-%m-%dT%H:%M:%S.%s%j`'
    output: {{.output}}

  - id: utc_containerd_timestamp_parser
    type: time_parser
    parse_from: $record.time
    layout: '%Y-%m-%dT%H:%M:%S.%sZ'
    output: {{.output}}
#{{ end }}

#{{ if $enable_gc_logs }}
  - id: elasticsearch_gc_input
    type: file_input
    include:
      - {{ $gc_log_path }}
    start_at: {{ $start_at }}
    labels:
      log_type: elasticsearch.gc
      plugin_id: {{ .id }}
    output: elasticsearch_gc_parser

  - id: elasticsearch_gc_parser
    type: regex_parser
    regex: '^\[(?P<time>\d+-\d+-\d+T\d+:\d+:\d+.\d+\+\d+)\]\[\d+\]\[(?P<type>[A-z,]+)\s*\]\s*(?:GC\((?P<gc_run>\d+)\))?\s*(?P<message>.*)'
    timestamp:
      parse_from: time
      layout: '%Y-%m-%dT%H:%M:%S.%s%z'
    output: {{.output}}
#{{ end }}
